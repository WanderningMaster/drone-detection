// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: api.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyzerServiceClient is the client API for AnalyzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzerServiceClient interface {
	Analyze(ctx context.Context, opts ...grpc.CallOption) (AnalyzerService_AnalyzeClient, error)
}

type analyzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerServiceClient(cc grpc.ClientConnInterface) AnalyzerServiceClient {
	return &analyzerServiceClient{cc}
}

func (c *analyzerServiceClient) Analyze(ctx context.Context, opts ...grpc.CallOption) (AnalyzerService_AnalyzeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalyzerService_ServiceDesc.Streams[0], "/api.AnalyzerService/Analyze", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyzerServiceAnalyzeClient{stream}
	return x, nil
}

type AnalyzerService_AnalyzeClient interface {
	Send(*AudioBuf) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type analyzerServiceAnalyzeClient struct {
	grpc.ClientStream
}

func (x *analyzerServiceAnalyzeClient) Send(m *AudioBuf) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyzerServiceAnalyzeClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzerServiceServer is the server API for AnalyzerService service.
// All implementations should embed UnimplementedAnalyzerServiceServer
// for forward compatibility
type AnalyzerServiceServer interface {
	Analyze(AnalyzerService_AnalyzeServer) error
}

// UnimplementedAnalyzerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAnalyzerServiceServer struct {
}

func (UnimplementedAnalyzerServiceServer) Analyze(AnalyzerService_AnalyzeServer) error {
	return status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}

// UnsafeAnalyzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServiceServer will
// result in compilation errors.
type UnsafeAnalyzerServiceServer interface {
	mustEmbedUnimplementedAnalyzerServiceServer()
}

func RegisterAnalyzerServiceServer(s grpc.ServiceRegistrar, srv AnalyzerServiceServer) {
	s.RegisterService(&AnalyzerService_ServiceDesc, srv)
}

func _AnalyzerService_Analyze_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyzerServiceServer).Analyze(&analyzerServiceAnalyzeServer{stream})
}

type AnalyzerService_AnalyzeServer interface {
	SendAndClose(*Empty) error
	Recv() (*AudioBuf, error)
	grpc.ServerStream
}

type analyzerServiceAnalyzeServer struct {
	grpc.ServerStream
}

func (x *analyzerServiceAnalyzeServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyzerServiceAnalyzeServer) Recv() (*AudioBuf, error) {
	m := new(AudioBuf)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzerService_ServiceDesc is the grpc.ServiceDesc for AnalyzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AnalyzerService",
	HandlerType: (*AnalyzerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Analyze",
			Handler:       _AnalyzerService_Analyze_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	UpdateStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) UpdateStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.GatewayService/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations should embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	UpdateStatus(context.Context, *StatusRequest) (*StatusResponse, error)
}

// UnimplementedGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) UpdateStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).UpdateStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _GatewayService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
